#  If 'strict' is True, then the Java Toolkit will reject unsigned
#  or unencrypted messages if it expects them signed or encrypted
#  Also will reject the messages if not strictly follow the SAML
onelogin.saml2.strict =  false

# Enable debug mode (to print errors)
onelogin.saml2.debug =  true


#  Service Provider Data that we are deploying
#

#  Identifier of the SP entity  (must be a URI)
onelogin.saml2.sp.entityid = http://sp.example.com:18080/java-saml-tookit-jspsample/metadata.jsp

# Specifies info about where and how the <AuthnResponse> message MUST be
#  returned to the requester, in this case our SP.
# URL Location where the <Response> from the IdP will be returned
onelogin.saml2.sp.assertion_consumer_service.url = http://sp.example.com:18080/java-saml-tookit-jspsample/acs.jsp

# SAML protocol binding to be used when returning the <Response>
# message.  Onelogin Toolkit supports for this endpoint the
# HTTP-POST binding only
onelogin.saml2.sp.assertion_consumer_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST

# Specifies info about where and how the <Logout Response> message MUST be
# returned to the requester, in this case our SP.
onelogin.saml2.sp.single_logout_service.url = http://sp.example.com:18080/java-saml-tookit-jspsample/sls.jsp

# SAML protocol binding to be used when returning the <LogoutResponse> or sending the <LogoutRequest>
# message.  Onelogin Toolkit supports for this endpoint the
# HTTP-Redirect binding only
onelogin.saml2.sp.single_logout_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect

# Specifies constraints on the name identifier to be used to
# represent the requested subject.
# Take a look on lib/Saml2/Constants.php to see the NameIdFormat supported
onelogin.saml2.sp.nameidformat = urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified

# Usually x509cert and privateKey of the SP are provided by files placed at
# the certs folder. But we can also provide them with the following parameters

onelogin.saml2.sp.x509cert =

# Requires Format PKCS#8   BEGIN PRIVATE KEY	     
# If you have     PKCS#1   BEGIN RSA PRIVATE KEY  convert it by   openssl pkcs8 -topk8 -inform pem -nocrypt -in sp.rsa_key -outform pem -out sp.pem
onelogin.saml2.sp.privatekey =

# Identity Provider Data that we want connect with our SP
#

# Identifier of the IdP entity  (must be a URI)
onelogin.saml2.idp.entityid = ping.example.com:default:entityId

# SSO endpoint info of the IdP. (Authentication Request protocol)
# URL Target of the IdP where the SP will send the Authentication Request Message
onelogin.saml2.idp.single_sign_on_service.url = https://ping.example.com:9031/idp/startSSO.ping?PartnerSpId=IdpExample
# SAML protocol binding to be used when returning the <Response>
# message.  Onelogin Toolkit supports for this endpoint the
# HTTP-Redirect binding only
onelogin.saml2.idp.single_sign_on_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect

# SLO endpoint info of the IdP.
# URL Location of the IdP where the SP will send the SLO Request
onelogin.saml2.idp.single_logout_service.url =

# Optional SLO Response endpoint info of the IdP.
# URL Location of the IdP where the SP will send the SLO Response. If left blank, same URL as onelogin.saml2.idp.single_logout_service.url will be used.
# Some IdPs use a separate URL for sending a logout request and response, use this property to set the separate response url
onelogin.saml2.idp.single_logout_service.response.url =

# SAML protocol binding to be used when returning the <Response>
# message.  Onelogin Toolkit supports for this endpoint the
# HTTP-Redirect binding only
onelogin.saml2.idp.single_logout_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect

# Public x509 certificate of the IdP
onelogin.saml2.idp.x509cert = -----BEGIN CERTIFICATE-----\nMIIDbDCCAlSgAwIBAgIGAWaH0ro0MA0GCSqGSIb3DQEBCwUAMHcxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDTzEPMA0GA1UEBxMGRGVudmVyMRYwFAYDVQQKEw1QaW5nIElkZW50aXR5MRQwEgYDVQQLEwtEZXZlbG9wbWVudDEcMBoGA1UEAxMTQ29uZmlnIFNpZ25pbmcgQ2VydDAeFw0xODEwMTgxNTM3MDZaFw0zODEwMTMxNTM3MDZaMHcxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDTzEPMA0GA1UEBxMGRGVudmVyMRYwFAYDVQQKEw1QaW5nIElkZW50aXR5MRQwEgYDVQQLEwtEZXZlbG9wbWVudDEcMBoGA1UEAxMTQ29uZmlnIFNpZ25pbmcgQ2VydDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKDJcW9jgcGkqn3ylIbklBp4cGqESjrRfYd2J+67HlieH3O7i3pN7hmSVPMyBVItK0f1Ta5daxk7lQHBah3277AAdjuFekNI1G8x8DlfVP/q/0dXrmZQmbRUKtDlAyeE14A8o5f+bz4hTaX/lB5z/npkIqhKFEQrcHm7eFIaXl+nApwwLq47W/TO+RZ3ZK97i4gviZylrbc1HwJ+TMXETtzAl6DXooci53tMGG1aFV5gyrtDPDjoJmt3GtrFKzR76q6dWEmpUmRUlRnzUVH0UlaYGC9MuiPQYKWUkS1ybWdahW1aCsEizP6+ErqVWVJJFGxjK/MzG0r0iwdCS1wHrIUCAwEAATANBgkqhkiG9w0BAQsFAAOCAQEAPxYt1BKCaMZLgnlFdA81aR0meqX3/TlfqTSxb4GwQe5MGK6A9iIBtBOBC8uPnDcCBfpcPHAkQlSQb/LYit117mRsbalsFYNZV1Cfcf/2/XtSCUxEH9k0cUDNw7box1YK4Q90ZaJf3gI0fBvH1PSCGu8B9zNkLgB/+/UWqWLZIfprtwLaApEfqNjEY96uUeQCzC6G7fcdqpoE2vbVJ1K0q4qQnFkUbQOSyUofeo9ZvDtlLN3s+/vBQOjVDdfoJ6IX+aHjJiV21wyS3jZS2SYM+DaAMRaEmcqC10slV3R42bkoW1edQVC4oqz6gHtCrBC5yoJntaFWFmTqZ2GvgCFM4A==\n-----END CERTIFICATE-----



# "-----BEGIN CERTIFICATE-----\nMIIFhDCCA2wCCQCcIAldQTZP9DANBgkqhkiG9w0BAQsFADCBgzELMAkGA1UEBhMCVVMxEDAOBgNVBAgMB0Zsb3JpZGExDDAKBgNVBAcMA1BTTDELMAkGA1UECgwCQlMxDjAMBgNVBAsMBVNhbGVzMRkwFwYDVQQDDBBwaW5nLmV4YW1wbGUuY29tMRwwGgYJKoZIhvcNAQkBFg1tZmFudGlAYnMuY29tMB4XDTE5MDkwNTAwMzUzOVoXDTIyMDcwMTAwMzUzOVowgYMxCzAJBgNVBAYTAlVTMRAwDgYDVQQIDAdGbG9yaWRhMQwwCgYDVQQHDANQU0wxCzAJBgNVBAoMAkJTMQ4wDAYDVQQLDAVTYWxlczEZMBcGA1UEAwwQcGluZy5leGFtcGxlLmNvbTEcMBoGCSqGSIb3DQEJARYNbWZhbnRpQGJzLmNvbTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAMbVmAEQBtwrfY1x67yogMbf5PJWlIFU9E3Lvvo0FL6zOlDI3uVfEeXZGXOBZHy3+ME+J3kVstLpmiSm9H2YYZtISUpB16Izu38wxC1oY/sbZLyQOWFz/awoBsooNqfQ7AzKLeoj+rWC9FLpKZ+IHfP31X5NPlDB+vxJFp3+mbhVdCotHj+p4dDwvODz+c/nFrrEyqFk/jqoU2SE/bOnCGlkfqoDaYbf3fvuLxV2sk525nGXU6exFe0gXl9HhQpiADXgK0ZSR8jiMwnzNcnhLIdcGYBU/mlkZxS3+hKdLnP1nnzR3hH1VrFe56voOE8DSPanR8f4PxHFeVtbIZrOch4Qf6z20v91XqV4BdA5s+/jxAMIeVqIhTJmIXAR/VTKfl26hyTUzrOLEkk0je0SXMNFVvGg1deVE/Phu+NayaGjHnhGKv7RH6JU/NoDxGVqmXy5NEsyuzxPCIRJsZ44u1HrDCR8lWv7IjheELzlNaP/t4mezbrtIN4lp6LzC9LNksJ00Pp/QbfftJP2tXvby+QgJMIym9Ilx+wNEXvRGtLyU5Twnvz6r5pld6cAFinFdNnOu+jh1H1QIZFbKuJ0CiEPhBb3ClJSJFWoDC7w/fkcJDHKeFAQGZszr5AF6LcRnlBK5z0CDSUJ1+v4vCrK7PMjDZRWX5Sn6Edo//pa5TW3AgMBAAEwDQYJKoZIhvcNAQELBQADggIBAJ86sy5lkVUg/223khXYzVXdnVz8WxlDnURaSVkUjyxUvhmMVu0xo0wGwyzosifZToRiUK2gmA37icKIQwFUuDuozEkYrcbwHSVye1yRidgJLCGRJQyZn0lUqEsuq+bdL384eQlB+TKDGKFi1xOQJAYJ5rrXfmlmUiLuF/ZBg7UcgTG0r7OH5iijZkSGp3cW7TsfclQzSTP3vlbZ0EQkDGlrqH0KJc+v9MNGjuKOasXGK7UFzr/J+dBOQyVAOUs5ezIX9D2WywCskl5r7cKJZjEHvLt1G4Ftj0amDWp3MCZYk8GHVJMNaPb2cbX+x3ONNs51Hu+hRwhhbBvlXyGKTJQ8cART8bhmVTEIMfgPdVSsCd+9wt00g7WLtrU4AgFMq/vsKJ+n+EoJhB5XF4LiicIf4HXZG9A3UYOoNoa9aSjq4IbgCi8HpMprJzYGuafvIxol3BjHoMRV+dtdYer5f8Nqc4tsmZl1LGPm/PthvMABFzLCnedaUr2czX0+hhtfRypj4xFrZvzaMT0ANW16w0NpohKfKfWQNcM+pFHQXpKCEZsVJvjHlXUilE8dN5xOubtuWB3c2aY2LsVlAMdsah93d0dmvD+6qs32UziwSeZHXqVwO48+Mixaa1Pg5gtYcnNc0oHPeSPo9QM1zS94yznyTbO28MJV41SmjPi3VPzb\n-----END CERTIFICATE-----"
# Instead of use the whole x509cert you can use a fingerprint
# (openssl x509 -noout -fingerprint -in "idp.crt" to generate it,
# or add for example the -sha256 , -sha384 or -sha512 parameter)
#
# If a fingerprint is provided, then the certFingerprintAlgorithm is required in order to
# let the toolkit know which Algorithm was used. Possible values: sha1, sha256, sha384 or sha512
# 'sha1' is the default value.
# onelogin.saml2.idp.certfingerprint = 
# onelogin.saml2.idp.certfingerprint_algorithm = sha1


# Security settings
#

# Indicates that the nameID of the <samlp:logoutRequest> sent by this SP
# will be encrypted.
onelogin.saml2.security.nameid_encrypted = false

# Indicates whether the <samlp:AuthnRequest> messages sent by this SP
# will be signed.              [The Metadata of the SP will offer this info]
onelogin.saml2.security.authnrequest_signed = false

# Indicates whether the <samlp:logoutRequest> messages sent by this SP
# will be signed.
onelogin.saml2.security.logoutrequest_signed = false

# Indicates whether the <samlp:logoutResponse> messages sent by this SP
# will be signed.
onelogin.saml2.security.logoutresponse_signed = false

# Indicates a requirement for the <samlp:Response>, <samlp:LogoutRequest> and
# <samlp:LogoutResponse> elements received by this SP to be signed.
onelogin.saml2.security.want_messages_signed = false

# Indicates a requirement for the <saml:Assertion> elements received by this SP to be signed.
onelogin.saml2.security.want_assertions_signed = false

# Indicates a requirement for the Metadata of this SP to be signed.
# Right now supported null (in order to not sign) or true (sign using SP private key) 
onelogin.saml2.security.sign_metadata =

# Indicates a requirement for the Assertions received by this SP to be encrypted
onelogin.saml2.security.want_assertions_encrypted = false

# Indicates a requirement for the NameID received by this SP to be encrypted
onelogin.saml2.security.want_nameid_encrypted = false

# Authentication context.
# Set Empty and no AuthContext will be sent in the AuthNRequest
# You can set multiple values (comma separated them)
onelogin.saml2.security.requested_authncontext = urn:oasis:names:tc:SAML:2.0:ac:classes:Password

# Allows the authn comparison parameter to be set, defaults to 'exact'
onelogin.saml2.security.onelogin.saml2.security.requested_authncontextcomparison = exact


# Indicates if the SP will validate all received xmls.
# (In order to validate the xml, 'strict' and 'wantXMLValidation' must be true).
onelogin.saml2.security.want_xml_validation = true

# Algorithm that the toolkit will use on signing process. Options:
#  'http://www.w3.org/2000/09/xmldsig#rsa-sha1'
#  'http://www.w3.org/2000/09/xmldsig#dsa-sha1'
#  'http://www.w3.org/2001/04/xmldsig-more#rsa-sha256'
#  'http://www.w3.org/2001/04/xmldsig-more#rsa-sha384'
#  'http://www.w3.org/2001/04/xmldsig-more#rsa-sha512'
onelogin.saml2.security.signature_algorithm = http://www.w3.org/2000/09/xmldsig#rsa-sha1

# Organization
onelogin.saml2.organization.name = SP Java 
onelogin.saml2.organization.displayname = SP Java Example
onelogin.saml2.organization.url = http://sp.example.com
onelogin.saml2.organization.lang = 

# Contacts
onelogin.saml2.contacts.technical.given_name = Technical Guy
onelogin.saml2.contacts.technical.email_address = technical@example.com
onelogin.saml2.contacts.support.given_name = Support Guy
onelogin.saml2.contacts.support.email_address = support@@example.com
